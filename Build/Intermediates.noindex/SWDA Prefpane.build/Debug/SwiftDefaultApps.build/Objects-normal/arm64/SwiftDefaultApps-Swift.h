// Generated by Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
#ifndef SWIFTDEFAULTAPPS_SWIFT_H
#define SWIFTDEFAULTAPPS_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AppKit;
@import Foundation;
@import ObjectiveC;
@import PreferencePanes;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="SwiftDefaultApps",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

@class SWDAMainPrefPane;
@class NSTabView;
@class NSView;
@class SWDATabViewController;

/// Utilitary Singleton containing references to the proper instances of View controllers, tabs, taba data and so on.
SWIFT_CLASS("_TtC16SwiftDefaultApps14ControllersRef")
@interface ControllersRef : NSObject
@property (nonatomic, weak) IBOutlet SWDAMainPrefPane * _Nullable thePrefPane;
@property (nonatomic, weak) IBOutlet NSTabView * _Null_unspecified theTabView;
@property (nonatomic, weak) IBOutlet NSView * _Null_unspecified theMainView;
@property (nonatomic, weak) IBOutlet SWDATabViewController * _Nullable tabViewController;
/// Make sure there are no stray instances.
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSTextField;
@class NSString;
@class NSObjectController;
@class NSCoder;

IB_DESIGNABLE
SWIFT_CLASS("_TtC16SwiftDefaultApps7DRYView")
@interface DRYView : NSView
@property (nonatomic, weak) IBOutlet NSTextField * _Nullable descriptionControl;
@property (nonatomic, weak) IBOutlet NSTextField * _Nullable titleControl;
@property (nonatomic, copy) IBInspectable NSString * _Nullable nibName;
@property (nonatomic, strong) NSObject * _Nullable inspectedObject;
@property (nonatomic, strong) IBOutlet NSObjectController * _Nullable inspectedObjectControllerReference;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
- (nonnull instancetype)initWithFrame:(NSRect)frameRect OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class NSButton;
@class NSNumber;

@interface DRYView (SWIFT_EXTENSION(SwiftDefaultApps))
/// Bridge required to make currentTab really dependent on the selectedTabViewItemIndex
@property (nonatomic, readonly, weak) SWDATabViewController * _Nullable tabViewController;
/// Reference to the currently selected TabViewItem
@property (nonatomic, readonly, copy) NSString * _Nullable currentTab;
/// Open Finder and Reveal the currently selected Application.
- (IBAction)revealAppInFinder:(NSButton * _Nonnull)sender;
/// Determines whether to show a Description in the Detail View
@property (nonatomic, readonly, strong) NSNumber * _Nonnull showDescriptionBool;
/// Determines whether to show a path and Reveal In Finder button
@property (nonatomic, readonly, strong) NSNumber * _Nonnull showPathBool;
/// The only tab where an “Add” button is at all meaningful is the URI Schemes.
@property (nonatomic, readonly, strong) NSNumber * _Nonnull showAddRemoveBool;
/// Determines whether to ahow a list of file extensions associated with a given UTI.
@property (nonatomic, readonly, strong) NSNumber * _Nonnull showFileExtensionsBool;
+ (NSSet<NSString *> * _Nonnull)keyPathsForValuesAffectingShowDescriptionBool SWIFT_WARN_UNUSED_RESULT;
+ (NSSet<NSString *> * _Nonnull)keyPathsForValuesAffectingShowPathBool SWIFT_WARN_UNUSED_RESULT;
+ (NSSet<NSString *> * _Nonnull)keyPathsForValuesAffectingShowAddRemoveBool SWIFT_WARN_UNUSED_RESULT;
+ (NSSet<NSString *> * _Nonnull)keyPathsForValuesAffectingShowFileExtensionsBool SWIFT_WARN_UNUSED_RESULT;
+ (NSSet<NSString *> * _Nonnull)keyPathsForValuesAffectingCurrentTab SWIFT_WARN_UNUSED_RESULT;
@end


@class NSEvent;

IB_DESIGNABLE
SWIFT_CLASS("_TtC16SwiftDefaultApps18HyperlinkTextField")
@interface HyperlinkTextField : NSTextField
@property (nonatomic, copy) IBInspectable NSString * _Nonnull href;
- (void)awakeFromNib;
- (void)mouseDown:(NSEvent * _Nonnull)event;
- (nonnull instancetype)initWithFrame:(NSRect)frameRect OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end






/// Create a progressbar and display it on a modal sheet while the Content Array is populated asynchronously.
SWIFT_CLASS("_TtC16SwiftDefaultApps13ProgressAlert")
@interface ProgressAlert : NSAlert
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Represents information about an application and its associated URI Schemes and UTIs as an object.
SWIFT_CLASS("_TtC16SwiftDefaultApps19SWDAApplicationInfo")
@interface SWDAApplicationInfo : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class SWDATreeRow;
@class NSImage;

/// Our other NSObject subclass adopting the SWDAContentProtocol, represents an Application and all of its associated URI Schemes and UTIs. If an application declares no UTIs, it looks for File Extensions and displays the UTI preferred to represent that extension.
SWIFT_CLASS("_TtC16SwiftDefaultApps19SWDAApplicationItem")
@interface SWDAApplicationItem : NSObject
@property (nonatomic, copy) NSArray<SWDATreeRow *> * _Nonnull contentHandlers;
@property (nonatomic, copy) NSString * _Nonnull contentDescription;
@property (nonatomic, copy) NSString * _Nonnull contentName;
@property (nonatomic, strong) SWDAApplicationInfo * _Nullable appBundleInfo;
/// Determine a hashValue from the Bundle ID to prevent duplicate Applications, since in practice Launch Services will not allow us to choose a specific version of an Application but rather choose the best according to its own set of criteria outlined in the Launch Services Programming Guide.
@property (nonatomic, readonly) NSUInteger hash;
@property (nonatomic, copy) NSString * _Nonnull displayName;
@property (nonatomic, copy) NSString * _Nonnull appPath;
@property (nonatomic, strong) NSImage * _Nullable appIcon;
@property (nonatomic, copy) NSString * _Nonnull getExtensions;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represent an instance of a kind of Content (UTI/URL) and a valid associated application in a given role.
SWIFT_CLASS("_TtC16SwiftDefaultApps18SWDAContentHandler")
@interface SWDAContentHandler : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The main class adopting SWDAContentProtocol, represents either a UTI or an URL; it’s name, associated handlers, description in the case of URI Schemes and associated file-extensions in the case of UTIs.
SWIFT_CLASS("_TtC16SwiftDefaultApps15SWDAContentItem")
@interface SWDAContentItem : NSObject
/// Generates the NSTreeView displaying all the handlers associated to this content type. Results are sorted alphabetically, with the exception of the special “Other…” and “Do Nothing” entries.
@property (nonatomic, copy) NSArray<SWDATreeRow *> * _Nonnull contentHandlers;
@property (nonatomic, copy) NSString * _Nonnull contentDescription;
@property (nonatomic, copy) NSString * _Nonnull contentName;
@property (nonatomic, copy) NSString * _Nonnull displayName;
@property (nonatomic, copy) NSString * _Nonnull getExtensions;
@property (nonatomic, copy) NSString * _Nonnull appPath;
@property (nonatomic, strong) NSImage * _Nullable appIcon;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Our main model class, tasked with getting and populating the content arrays associated with each tab.
SWIFT_CLASS("_TtC16SwiftDefaultApps17SWDAHandlersModel")
@interface SWDAHandlersModel : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSArray<SWDAContentItem *> * _Nullable allUTIs;)
+ (NSArray<SWDAContentItem *> * _Nullable)allUTIs SWIFT_WARN_UNUSED_RESULT;
+ (void)setAllUTIs:(NSArray<SWDAContentItem *> * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSArray<SWDAContentItem *> * _Nullable allSchemes;)
+ (NSArray<SWDAContentItem *> * _Nullable)allSchemes SWIFT_WARN_UNUSED_RESULT;
+ (void)setAllSchemes:(NSArray<SWDAContentItem *> * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSArray<SWDAContentItem *> * _Nullable internetSchemes;)
+ (NSArray<SWDAContentItem *> * _Nullable)internetSchemes SWIFT_WARN_UNUSED_RESULT;
+ (void)setInternetSchemes:(NSArray<SWDAContentItem *> * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSArray<SWDAApplicationItem *> * _Nullable allApps;)
+ (NSArray<SWDAApplicationItem *> * _Nullable)allApps SWIFT_WARN_UNUSED_RESULT;
+ (void)setAllApps:(NSArray<SWDAApplicationItem *> * _Nullable)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSBundle;

/// Main PreferencePane class
SWIFT_CLASS("_TtC16SwiftDefaultApps16SWDAMainPrefPane")
@interface SWDAMainPrefPane : NSPreferencePane
@property (nonatomic, weak) IBOutlet NSView * _Null_unspecified mainCustomView;
@property (nonatomic, weak) IBOutlet SWDATabViewController * _Nullable tabViewController;
/// Populate our utility singleton with instances of the views and TabView Controller; initialize tabs.
- (void)assignMainView;
/// Add the TabView Controller to the Main View and load content for the default tab.
- (void)mainViewDidLoad;
/// Initialize the content array when the pane is first opened.
- (void)didSelect;
- (IBAction)showAboutDialog:(NSButton * _Nonnull)sender;
- (nonnull instancetype)initWithBundle:(NSBundle * _Nonnull)bundle OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSArrayController;
@class NSTableView;
@class NSIndexSet;

/// By subclassing (instead of extending) DRYView for this, we make sure variables such as the contentArray and other possibly-work-intensive code is only executed on instances of the tab and not also in the detail view.
SWIFT_CLASS("_TtC16SwiftDefaultApps15SWDATabTemplate")
@interface SWDATabTemplate : DRYView
@property (nonatomic, weak) IBOutlet ProgressAlert * _Nullable progressAlert;
@property (nonatomic, weak) IBOutlet NSView * _Nullable titleView;
@property (nonatomic, weak) IBOutlet NSTextField * _Nullable customNewScheme;
@property (nonatomic, strong) IBOutlet NSArrayController * _Null_unspecified arrayController;
@property (nonatomic, strong) IBOutlet NSTableView * _Null_unspecified tableView;
/// Let’s save selected item for each tab, update selectionIndex with the current value of our selection when our selection would be replaced with an empty or invalid one.
@property (nonatomic, strong) NSIndexSet * _Nonnull tableIndexes;
/// Add a custom URI Scheme and assign our dummy app as the default handler. In practice this should almost never be necessary but sometimes Launch Services move in mysterious ways.
- (IBAction)addCustomScheme:(NSButton * _Nonnull)sender;
/// Backing Store for the list of items on each tab.
@property (nonatomic, copy) NSArray * _Nullable contentArrayStore;
/// Check whether contentArrayStore holds anything; return that if it does or populate it asynchronously if it doesn’t.
@property (nonatomic, readonly, copy) NSArray * _Nullable contentArray;
+ (NSSet<NSString *> * _Nonnull)keyPathsForValuesAffectingContentArray SWIFT_WARN_UNUSED_RESULT;
+ (NSSet<NSString *> * _Nonnull)keyPathsForValuesAffectingContentArrayStore SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(NSRect)frameRect OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// NSTabView subclass, initializes instances of the canned tabs, builds the tabView and handles saving data such as selection indexes between multiple tabs.
SWIFT_CLASS("_TtC16SwiftDefaultApps21SWDATabViewController")
@interface SWDATabViewController : NSTabViewController
/// Preserve selection indexes when switching tabs.
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
/// Initialize the NSTabView, create the tabs and assign their NIB.
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSNibName _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// NSView subclass used to implement automatic sorting of the NSTableView.
SWIFT_CLASS("_TtC16SwiftDefaultApps13SWDATableView")
@interface SWDATableView : NSView
@property (nonatomic, weak) IBOutlet NSArrayController * _Nullable arrayController;
@property (nonatomic, weak) IBOutlet NSTableView * _Nullable tableView;
- (void)awakeFromNib;
- (nonnull instancetype)initWithFrame:(NSRect)frameRect OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class NSOutlineView;

/// NSTreeController sub-class that acts mostly as a bridge between the DRYViews and a couple Bindings.
/// Single outlineView delegate function implemented obeying strictly to a cosmetic issue.
SWIFT_CLASS("_TtC16SwiftDefaultApps18SWDATreeController")
@interface SWDATreeController : NSTreeController <NSOutlineViewDelegate>
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, weak) IBOutlet NSOutlineView * _Nullable outlineView;
@property (nonatomic, weak) IBOutlet DRYView * _Nullable dryView;
/// Return true if “Applications” is the currently selected tab.
@property (nonatomic, readonly, strong) NSNumber * _Nonnull showPathBool;
/// Expand tree items by default.
@property (nonatomic) id _Nullable content;
/// Determines whether to show the disclosure button for a group row depending on the selected tab and its place in the hierarchy.
- (BOOL)outlineView:(NSOutlineView * _Nonnull)outlineView shouldShowOutlineCellForItem:(id _Nonnull)item SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithContent:(id _Nullable)content SWIFT_UNAVAILABLE;
@end

@class NSFont;
@class NSColor;

/// Our NSObject sub-class that represents a ContentHandler, foundation of the Detail Outline view and as such responsible for most of the heavy lifting
SWIFT_CLASS("_TtC16SwiftDefaultApps11SWDATreeRow")
@interface SWDATreeRow : NSObject
@property (nonatomic, copy) NSArray<SWDATreeRow *> * _Nonnull children;
@property (nonatomic, readonly) NSInteger count;
@property (nonatomic, readonly) BOOL isLeaf;
/// Dirty trick to avoid subclassing NSOutlineView.
@property (nonatomic, readonly) BOOL shouldFauxIndent;
/// Bindings-compatible determination of the font to use.
@property (nonatomic, readonly, strong) NSFont * _Nullable rowFont;
/// Show header rows in a different color.
@property (nonatomic, readonly, strong) NSColor * _Nullable textColor;
/// What the Tree Row will actually display as a label.
@property (nonatomic, copy) NSString * _Nonnull rowTitle;
@property (nonatomic, strong) NSImage * _Nullable appIcon;
/// Binding-compatible determination used exclusively for SWDATreeRows in the Applications tab. Returns true if the currently selected application is the default handler for the content represented by this row. It’s only enabled when its state is off, since in practice it’s not actually possible to remove handlers from LaunchServices. Rather, the service takes care of its own clean-up if it detects an UTI or URL Scheme does not have any valid handlers.
@property (nonatomic) BOOL isHandlingContent;
/// Binding-compatible determination used in every tab except for Applications. Returns true if the application represented by the current row is the default handler for the selected content type. Allows “Other” to specify apps that aren’t detected as valid handlers for whatever reason. Note that setting something to be handled by “Other” will not <em>actually</em> work unless the application’s Info.plist adequately declares association with that content.
@property (nonatomic) BOOL isDefaultHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif
